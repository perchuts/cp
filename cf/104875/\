#include <bits/stdc++.h>
#define int long long
#define endl '\n'
#define sz(x) (int) x.size()
#define pb push_back
#define _ ios_base::sync_with_stdio(0); cin.tie(0);
using namespace std;

using ll = long long;

const int mod = 998244353;
const int inf = 2e9 + 100;
const int PI = acos(-1);

int32_t main() {_
	int n, m;
	vector<string> grid(n);
	for (auto &s : grid) cin >> s;
	
	const int MX = 4 * n * m;

	using T = double;
	vector<vector<pair<int, T>>> g(MX);

	auto id = [&] (int i, int j, int k) {
		return 4*(i*m + j) + k;
	};

	// T..0..T
	// .     .
	// 1     2
	// .     .
	// T..3..T

	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) {
			for (int k = 0; k < 4; k++) {
				int to = (k + 1) % 4;
				T cost = grid[i][j] == 'O' ? PI/2 : 1;
				g[id(i, j, k)].emplace_back(id(i, j, to), cost);
			}
			if (i > 0) {
				g[id(i - 1, j, 3)].emplace_back(id(i, j, 0), 0);
				g[id(i, j, 0)].emplace_back(id(i - 1, j, 3), 0);
			}
			if (j > 0) {
				g[id(i, j - 1, 2)].emplace_back(id(i, j, 1), 0);
				g[id(i, j, 1)].emplace_back(id(i, j - 1, 2), 0);
			}
		}
	}

	vector<T> dist(MX);
	dist[id(0, 0, 0)] = 1.0/2;
	dist[id(0, 0, 1)] = 1.0/2;
	priority_queue<pair<T, int>, vector<pair<T, int>>, greater<pair<T, int>>> pq;
	
	pq.emplace_back(dist[id(0, 0, 0)], id(0, 0, 0));
	pq.emplace_back(dist[id(0, 0, 1)], id(0, 0, 1));
	while (pq.size()) {
		auto [d, u] = pq.top(); pq.pop();
		if (d > dist[u]) continue;
		for (auto [w, v] : g[u]) if (dist[v] > dist[u] + w) {
			dist[v] = dist[u] + w;
			pq.emplace(dist[v], v);
		}
	}

	cout << fixed << setprecision(9);
	cout << min(dist[id(n - 1, m - 1, 2)], dist[id(n - 1, m - 1, 3)]) << endl;
}
